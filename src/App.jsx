import { useEffect, useMemo, useRef, useState } from "react";

const BACKEND_BASE = "https://homealoneminiapp.onrender.com"; // —Ç–≤–æ–π Render

// –°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ –º–∏–Ω–∏-–∞–ø–ø–∞.
// –í–ù–ò–ú–ê–ù–ò–ï: —Å–µ–π—á–∞—Å –±—ç–∫–µ–Ω–¥ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫ (TEST_MODE=True).
// –ó–¥–µ—Å—å —Å—Ç–∞–≤–ª—é 30, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –∏ –±—ç–∫ —Å–æ–≤–ø–∞–¥–∞–ª–∏. –ö–æ–≥–¥–∞ –ø–µ—Ä–µ–≤–µ–¥—ë—à—å –±—ç–∫ –Ω–∞ 60 ‚Äî –ø–æ–º–µ–Ω—è–µ—à—å —Ç—É—Ç –Ω–∞ 60.
const COUNTDOWN_SECONDS = 30;

export default function App() {
  // Telegram user_id (chat_id). –í–Ω—É—Ç—Ä–∏ Telegram –æ–Ω –µ—Å—Ç—å –≤ initDataUnsafe.
  const [userId, setUserId] = useState(null);

  // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [status, setStatus] = useState("–¥–æ–º–∞"); // "–¥–æ–º–∞" | "–Ω–µ –¥–æ–º–∞"
  const [countdown, setCountdown] = useState(COUNTDOWN_SECONDS);
  const [timerRunning, setTimerRunning] = useState(false);

  // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
  const [contactInput, setContactInput] = useState("");
  const [savedContact, setSavedContact] = useState("");
  const [loadingContact, setLoadingContact] = useState(false);

  // –§–æ–Ω —ç–∫—Ä–∞–Ω–∞ (–∑–µ–ª—ë–Ω—ã–π/–∫—Ä–∞—Å–Ω—ã–π)
  const bgStyle = useMemo(() => {
    return status === "–¥–æ–º–∞"
      ? { background: "linear-gradient(180deg, #d8f3dc 0%, #b7e4c7 100%)" }
      : { background: "linear-gradient(180deg, #ffd1d1 0%, #ffb1b1 100%)" };
  }, [status]);

  // –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å userId –∏–∑ Telegram WebApp. –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º.
  useEffect(() => {
    const tg = window?.Telegram?.WebApp;
    try {
      if (tg?.initDataUnsafe?.user?.id) {
        setUserId(tg.initDataUnsafe.user.id);
      }
      tg?.expand?.();
    } catch (e) {}
  }, []);

  // –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
  useEffect(() => {
    if (!userId) return;
    (async () => {
      try {
        const resp = await fetch(`${BACKEND_BASE}/contact?user_id=${userId}`);
        const data = await resp.json();
        if (data?.emergency_contact) {
          setSavedContact(data.emergency_contact);
        }
      } catch (e) {
        // —Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      }
    })();
  }, [userId]);

  // –õ–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç (—á–∏—Å—Ç–æ –¥–ª—è UX). –ë—ç–∫–µ–Ω–¥ —Å–≤–æ–π —Ç–∞–π–º–µ—Ä —Å—á–∏—Ç–∞–µ—Ç —Å–∞–º.
  useEffect(() => {
    if (status !== "–Ω–µ –¥–æ–º–∞" || !timerRunning) return;
    setCountdown((prev) => (prev === COUNTDOWN_SECONDS ? prev : COUNTDOWN_SECONDS)); // –∑–∞—â–∏—Ç–∞
    const id = setInterval(() => {
      setCountdown((s) => {
        if (s <= 1) {
          clearInterval(id);
          return 0;
        }
        return s - 1;
      });
    }, 1000);
    return () => clearInterval(id);
  }, [status, timerRunning]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥
  const sendStatus = async (newStatus) => {
    if (!userId) return;
    try {
      await fetch(`${BACKEND_BASE}/status`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ user_id: userId, status: newStatus }),
      });
    } catch (e) {}
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  const saveContact = async () => {
    if (!userId) return;
    const value = contactInput.trim();
    if (!/^@[a-zA-Z0-9_]{5,}$/.test(value)) return; // –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è @username
    setLoadingContact(true);
    try {
      const resp = await fetch(`${BACKEND_BASE}/contact`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ user_id: userId, contact: value }),
      });
      const ok = (await resp.json())?.success;
      if (ok) {
        setSavedContact(value);
        setContactInput("");
      }
    } catch (e) {
    } finally {
      setLoadingContact(false);
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞
  const toggleStatus = () => {
    const newStatus = status === "–¥–æ–º–∞" ? "–Ω–µ –¥–æ–º–∞" : "–¥–æ–º–∞";
    setStatus(newStatus);
    sendStatus(newStatus);
    if (newStatus === "–Ω–µ –¥–æ–º–∞") {
      setCountdown(COUNTDOWN_SECONDS);
      setTimerRunning(true);
    } else {
      setTimerRunning(false);
      setCountdown(COUNTDOWN_SECONDS);
    }
  };

  // –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
  const imageSrc =
    status === "–¥–æ–º–∞"
      ? "https://i.postimg.cc/g2c0nwhz/2025-08-19-16-37-23.png"
      : "https://i.postimg.cc/pLjFJ5TD/2025-08-19-16-33-44.png";

  return (
    <div className="app" style={bgStyle}>
      <div className="screen">
        <div className="header">
          <div className="title">HomeAlone</div>
          <div className="status-badge">
            {status === "–¥–æ–º–∞" ? "üè° –î–æ–º–∞" : "üö∂ –ù–µ –¥–æ–º–∞"}
          </div>
        </div>

        <div className="card hero">
            <img src={imageSrc} alt={status === "–¥–æ–º–∞" ? "happy dog" : "sad dog"} />
        </div>

        {status === "–Ω–µ –¥–æ–º–∞" ? (
          <div className="card timer">
            –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç: {countdown} —Å–µ–∫
          </div>
        ) : (
          <div className="hint">–ü–µ—Ä–µ–≤–µ–¥–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å, –∫–æ–≥–¥–∞ —É—Ö–æ–¥–∏—à—å –∏–∑ –¥–æ–º–∞.</div>
        )}

        <div className="card slider-wrap" aria-label="–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–º–∞/–Ω–µ –¥–æ–º–∞">
          <label className="toggle">
            <input
              type="checkbox"
              checked={status === "–¥–æ–º–∞"}
              onChange={toggleStatus}
              aria-checked={status === "–¥–æ–º–∞"}
              aria-label={status === "–¥–æ–º–∞" ? "–°–µ–π—á–∞—Å –¥–æ–º–∞" : "–°–µ–π—á–∞—Å –Ω–µ –¥–æ–º–∞"}
            />
            <span className="track"></span>
            <span className="thumb"></span>
          </label>
        </div>

        <div className="card">
          <div className="row" style={{ marginBottom: 8 }}>
            <input
              className="input"
              type="text"
              inputMode="text"
              placeholder="@—ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π_–∫–æ–Ω—Ç–∞–∫—Ç"
              value={contactInput}
              onChange={(e) => setContactInput(e.target.value)}
            />
            <button
              className="button"
              onClick={saveContact}
              disabled={!/^@[a-zA-Z0-9_]{5,}$/.test(contactInput) || loadingContact || !userId}
            >
              {loadingContact ? "–°–æ—Ö—Ä–∞–Ω—è—é..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}
            </button>
          </div>
          <div className="hint">
            {savedContact
              ? <>–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: <b>{savedContact}</b>. –û–Ω –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏—à—å.</>
              : <>–£–∫–∞–∂–∏ @username –∫–æ–Ω—Ç–∞–∫—Ç–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å.</>}
          </div>
        </div>

        {!userId && (
          <div className="hint">
            –û—Ç–∫—Ä–æ–π –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ **–≤–Ω—É—Ç—Ä–∏ Telegram**, —á—Ç–æ–±—ã –≤—Å—ë —Ä–∞–±–æ—Ç–∞–ª–æ (–Ω—É–∂–µ–Ω —Ç–≤–æ–π user_id).
          </div>
        )}
      </div>
    </div>
  );
}
