import React, { useState, useEffect } from "react";
import axios from "axios";

function App() {
  const [status, setStatus] = useState("–¥–æ–º–∞");
  const [contact, setContact] = useState("");
  const [savedContact, setSavedContact] = useState("");
  const [isEditing, setIsEditing] = useState(true);
  const [timeLeft, setTimeLeft] = useState(null);

  // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MiniApp (–≤ Telegram –æ–Ω –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å); fallback —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  const userId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id || 12345;

  // –¢–í–û–ô –±—ç–∫–µ–Ω–¥ –Ω–∞ Render
  const API_URL = "https://homealoneminiapp.onrender.com";

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  useEffect(() => {
    axios
      .get(`${API_URL}/contact`, { params: { user_id: userId } })
      .then((res) => {
        if (res.data.emergency_contact) {
          setContact(res.data.emergency_contact);
          setSavedContact(res.data.emergency_contact);
          setIsEditing(false);
        }
      })
      .catch((err) => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:", err));
  }, [userId]);

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
  const handleSaveContact = async () => {
    try {
      const res = await axios.post(`${API_URL}/contact`, {
        user_id: userId,
        contact,
      });
      if (res.data.success) {
        setSavedContact(contact);
        setIsEditing(false);
      } else {
        alert(res.data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç");
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:", err);
      alert("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞");
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ —Å–ª–∞–π–¥–µ—Ä
  // –í–ê–ñ–ù–û: checked === "–¥–æ–º–∞" (–∑–µ–ª—ë–Ω—ã–π), unchecked === "–Ω–µ –¥–æ–º–∞" (–∫—Ä–∞—Å–Ω—ã–π)
  const handleToggle = async (checked) => {
    const newStatus = checked ? "–¥–æ–º–∞" : "–Ω–µ –¥–æ–º–∞";
    setStatus(newStatus);

    try {
      await axios.post(`${API_URL}/status`, {
        user_id: userId,
        status: newStatus,
      });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", err);
    }

    // –õ–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç (—Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ). –°–µ—Ä–≤–µ—Ä–Ω—ã–π —Ç–∞–π–º–µ—Ä ‚Äî –≤ app.py
    if (newStatus === "–Ω–µ –¥–æ–º–∞") {
      const duration = 30; // —Å–µ–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
      setTimeLeft(duration);
      const t = setInterval(() => {
        setTimeLeft((prev) => {
          if (prev === 1) clearInterval(t);
          return prev > 0 ? prev - 1 : 0;
        });
      }, 1000);
    } else {
      setTimeLeft(null);
    }
  };

  return (
    <div
      className="app"
      style={{
        background: status === "–¥–æ–º–∞" ? "#E9F8EC" : "#FFE6E6",
        minHeight: "100vh",
        paddingTop: "56px", // —á—Ç–æ–±—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ —É–µ–∑–∂–∞–ª –ø–æ–¥ —à—Ç–æ—Ä–∫—É Telegram
      }}
    >
      <div className="screen">
        <h1 className="title">üè† Home Alone MiniApp</h1>

        <div className="card">
          <h3>–°—Ç–∞—Ç—É—Å:</h3>
          <div className="slider-wrap">
            <label className="toggle">
              <input
                type="checkbox"
                checked={status === "–¥–æ–º–∞"}
                onChange={(e) => handleToggle(e.target.checked)}
              />
              <div className="track"></div>
              <div className="thumb"></div>
              <div className="labels">
                <span className="left">–î–æ–º–∞</span>
                <span className="right">–ù–µ –¥–æ–º–∞</span>
              </div>
            </label>
          </div>
        </div>

        {/* –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É */}
        <div className="hero">
          <img
            src={
              status === "–¥–æ–º–∞"
                ? "https://i.postimg.cc/g2c0nwhz/2025-08-19-16-37-23.png" // —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –ø—ë—Å
                : "https://i.postimg.cc/pLjFJ5TD/2025-08-19-16-33-44.png" // –≥—Ä—É—Å—Ç–Ω—ã–π –ø—ë—Å
            }
            alt="dog"
          />
        </div>

        {/* –¢–∞–π–º–µ—Ä –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –≤ "–Ω–µ –¥–æ–º–∞" */}
        {status === "–Ω–µ –¥–æ–º–∞" && (
          <div className="timer">‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {timeLeft ?? "..."} —Å–µ–∫</div>
        )}

        <div className="card">
          <h3>–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:</h3>
          <div className="row">
            <input
              className="input"
              type="text"
              value={contact}
              disabled={!isEditing}
              onChange={(e) => setContact(e.target.value)}
              placeholder="@username"
            />
            {isEditing ? (
              <button className="button" onClick={handleSaveContact}>
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            ) : (
              <button className="button" onClick={() => setIsEditing(true)}>
                –ò–∑–º–µ–Ω–∏—Ç—å
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
