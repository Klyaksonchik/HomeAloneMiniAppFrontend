import React, { useEffect, useMemo, useState } from "react";
import axios from "axios";

const BACKEND_URL = "https://homealoneminiapp.onrender.com"; // –∑–∞–º–µ–Ω–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
const LS_KEY_CONTACT = "homealone_emergency_contact";

export default function App() {
  const tg = typeof window !== "undefined" ? window.Telegram?.WebApp : null;
  const userId = useMemo(() => tg?.initDataUnsafe?.user?.id ?? null, [tg]);
  const usernameFromTG = useMemo(() => {
    const u = tg?.initDataUnsafe?.user?.username;
    return u ? `@${u}` : null;
  }, [tg]);

  const [isHome, setIsHome] = useState(true);
  const [timeLeft, setTimeLeft] = useState(null);
  const [busy, setBusy] = useState(false);

  const [contact, setContact] = useState("");
  const [editingContact, setEditingContact] = useState(false);
  const [hasServerContact, setHasServerContact] = useState(false);

  const happyDog = "https://i.postimg.cc/g2c0nwhz/2025-08-19-16-37-23.png";
  const sadDog = "https://i.postimg.cc/pLjFJ5TD/2025-08-19-16-33-44.png";

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  useEffect(() => {
    try {
      tg?.ready?.();
      tg?.expand?.();
      tg?.MainButton?.hide?.();
    } catch {}
  }, [tg]);

  // –ü–æ–¥—Ç—è–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –±—ç–∫–∞
  useEffect(() => {
    if (!userId) return;
    axios
      .get(`${BACKEND_URL}/status`, { params: { user_id: userId } })
      .then((r) => {
        const serverStatus = r?.data?.status;
        setIsHome(serverStatus === "–Ω–µ –¥–æ–º–∞" ? false : true);
        setHasServerContact(Boolean(r?.data?.emergency_contact_set));
      })
      .catch(() => {});
  }, [userId]);

  // –ü–æ–¥—Ç—è–Ω—É—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –±—ç–∫; –µ—Å–ª–∏ –ø—É—Å—Ç–æ/–æ—à–∏–±–∫–∞ ‚Äî –±–µ—Ä–µ–º –∏–∑ localStorage
  useEffect(() => {
    if (!userId) return;
    axios
      .get(`${BACKEND_URL}/contact`, { params: { user_id: userId } })
      .then((r) => {
        const c = r?.data?.emergency_contact || "";
        if (c) {
          setContact(c);
          setHasServerContact(true);
          try {
            localStorage.setItem(LS_KEY_CONTACT, c);
          } catch {}
        } else {
          // –ë—ç–∫ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ: –ø–æ–ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
          try {
            const cached = localStorage.getItem(LS_KEY_CONTACT);
            if (cached) setContact(cached);
          } catch {}
        }
      })
      .catch(() => {
        try {
          const cached = localStorage.getItem(LS_KEY_CONTACT);
          if (cached) setContact(cached);
        } catch {}
      });
  }, [userId]);

  // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–µ–º–æ 30 —Å–µ–∫)
  useEffect(() => {
    if (!timeLeft) return;
    const id = setInterval(() => {
      setTimeLeft((prev) => (prev && prev > 0 ? prev - 1 : 0));
    }, 1000);
    return () => clearInterval(id);
  }, [timeLeft]);

  const toggleStatus = async () => {
    if (!userId) {
      alert("–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏‚Äë–∞–ø–ø –∏–∑ Telegram –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start –±–æ—Ç—É.");
      return;
    }
    if (busy) return;

    // –∑–∞–ø—Ä–µ—Ç ‚Äú–Ω–µ –¥–æ–º–∞‚Äù –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    const contactTrimmed = (contact || "").trim();
    const contactValid = contactTrimmed.startsWith("@") && contactTrimmed.length > 1;
    if (isHome && !contactValid) {
      alert("–£–∫–∞–∂–∏—Ç–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç (@username), –ø—Ä–µ–∂–¥–µ —á–µ–º —É—Ö–æ–¥–∏—Ç—å –∏–∑ –¥–æ–º–∞.");
      return;
    }

    setBusy(true);
    const username = usernameFromTG;

    try {
      if (isHome) {
        setIsHome(false);
        setTimeLeft(30);
        await axios.post(`${BACKEND_URL}/status`, {
          user_id: Number(userId),
          status: "–Ω–µ –¥–æ–º–∞",
          username,
        });
      } else {
        setIsHome(true);
        setTimeLeft(null);
        await axios.post(`${BACKEND_URL}/status`, {
          user_id: Number(userId),
          status: "–¥–æ–º–∞",
          username,
        });
      }
    } catch (e) {
      const msg = e?.response?.data?.error || e?.message || "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞";
      if (msg === "contact_required") {
        alert("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç (@username).");
      } else {
        alert(msg);
      }
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
      try {
        const r = await axios.get(`${BACKEND_URL}/status`, { params: { user_id: userId } });
        const serverStatus = r?.data?.status;
        setIsHome(serverStatus === "–Ω–µ –¥–æ–º–∞" ? false : true);
      } catch {}
    } finally {
      setBusy(false);
    }
  };

  // –ö–Ω–æ–ø–∫–∞ ‚Äú–ò–∑–º–µ–Ω–∏—Ç—å/–°–æ—Ö—Ä–∞–Ω–∏—Ç—å‚Äù —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  const onContactAction = async () => {
    if (!userId) {
      alert("–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏‚Äë–∞–ø–ø –∏–∑ Telegram –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start –±–æ—Ç—É.");
      return;
    }
    if (!editingContact) {
      setEditingContact(true);
      return;
    }
    let value = (contact || "").trim();
    if (value && !value.startsWith("@")) value = `@${value}`;
    if (!value || value === "@") {
      alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞.");
      return;
    }
    try {
      await axios.post(`${BACKEND_URL}/contact`, {
        user_id: Number(userId),
        contact: value,
      });
      setContact(value);
      setEditingContact(false);
      setHasServerContact(true);
      try {
        localStorage.setItem(LS_KEY_CONTACT, value);
      } catch {}
      alert("–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω");
    } catch (e) {
      const msg = e?.response?.data?.error || e?.message || "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞";
      alert(msg);
    }
  };

  const isTelegramReady = !!userId;
  const toggleDisabled = !isTelegramReady || busy || !(contact && contact.trim().length > 1);

  return (
    <div className="app" style={{ backgroundColor: isHome ? "#d4f7d4" : "#f7d4d4" }}>
      <h1>Home Alone App</h1>

      {!isTelegramReady && (
        <div style={{ marginBottom: 12, color: "#a00", fontWeight: "bold" }}>
          –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏‚Äë–∞–ø–ø –∏–∑ –º–µ–Ω—é –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start
        </div>
      )}

      {/* –°–ª–∞–π–¥–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
      <div className="slider-container" style={{ opacity: isTelegramReady ? 1 : 0.6 }}>
        <span className="status-label">üè† –î–æ–º–∞</span>
        <label className="switch">
          <input
            type="checkbox"
            checked={!isHome}
            onChange={toggleStatus}
            disabled={toggleDisabled}
          />
          <span className="slider round"></span>
        </label>
        <span className="status-label">üö∂ –ù–µ –¥–æ–º–∞</span>
      </div>

      {/* –¢–∞–π–º–µ—Ä */}
      {!isHome && timeLeft !== null && (
        <div className="timer">–û—Å—Ç–∞–ª–æ—Å—å: {timeLeft} —Å–µ–∫.</div>
      )}

      {/* –ö–∞—Ä—Ç–∏–Ω–∫–∞ */}
      <img src={isHome ? happyDog : sadDog} alt="dog" className="dog-image" />

      {/* –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç ‚Äî –≤–Ω–∏–∑—É */}
      <div style={{ width: "100%", display: "flex", flexDirection: "column", alignItems: "center" }}>
        <input
          className="contact-input"
          placeholder="@username —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"
          value={contact}
          onChange={(e) => setContact(e.target.value)}
          disabled={!isTelegramReady || !editingContact}
        />
        <button onClick={onContactAction} disabled={!isTelegramReady}>
          {editingContact ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" : "–ò–∑–º–µ–Ω–∏—Ç—å"}
        </button>
        {!hasServerContact && (
          <div style={{ marginTop: 8, color: "#a00" }}>
            –£–∫–∞–∂–∏—Ç–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º ‚Äú–Ω–µ –¥–æ–º–∞‚Äù.
          </div>
        )}
      </div>
    </div>
  );
}
