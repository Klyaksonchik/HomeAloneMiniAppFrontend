import React, { useEffect, useMemo, useState } from "react";
import axios from "axios";

const BACKEND_URL = "https://homealoneminiapp.onrender.com"; // –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç–µ

export default function App() {
  const tg = typeof window !== "undefined" ? window.Telegram?.WebApp : null;
  const userId = useMemo(() => tg?.initDataUnsafe?.user?.id ?? null, [tg]);

  const [isHome, setIsHome] = useState(true);
  const [timeLeft, setTimeLeft] = useState(null);
  const [busy, setBusy] = useState(false);

  const [contact, setContact] = useState("");
  const [editingContact, setEditingContact] = useState(false);

  const happyDog = "https://i.postimg.cc/g2c0nwhz/2025-08-19-16-37-23.png";
  const sadDog = "https://i.postimg.cc/pLjFJ5TD/2025-08-19-16-33-44.png";

  useEffect(() => {
    try {
      tg?.ready?.();
      tg?.expand?.();
      tg?.MainButton?.hide?.();
    } catch {}
  }, [tg]);

  // –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
  useEffect(() => {
    if (!userId) return;
    axios
      .get(`${BACKEND_URL}/contact`, { params: { user_id: userId } })
      .then((r) => setContact(r?.data?.emergency_contact || ""))
      .catch(() => {});
  }, [userId]);

  const toggleStatus = async () => {
    if (!userId) {
      alert("–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏‚Äë–∞–ø–ø –∏–∑ Telegram –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start –±–æ—Ç—É.");
      return;
    }
    if (busy) return;

    setBusy(true);
    const username =
      tg?.initDataUnsafe?.user?.username
        ? `@${tg.initDataUnsafe.user.username}`
        : null;

    try {
      if (isHome) {
        setIsHome(false);
        setTimeLeft(30); // –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await axios.post(`${BACKEND_URL}/status`, {
          user_id: Number(userId),
          status: "–Ω–µ –¥–æ–º–∞",
          username,
        });
      } else {
        setIsHome(true);
        setTimeLeft(null);
        await axios.post(`${BACKEND_URL}/status`, {
          user_id: Number(userId),
          status: "–¥–æ–º–∞",
          username,
        });
      }
    } catch (e) {
      const msg = e?.response?.data?.error || e?.message || "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞";
      alert(msg);
    } finally {
      setBusy(false);
    }
  };

  // –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  useEffect(() => {
    if (!timeLeft) return;
    const id = setInterval(() => {
      setTimeLeft((prev) => (prev && prev > 0 ? prev - 1 : 0));
    }, 1000);
    return () => clearInterval(id);
  }, [timeLeft]);

  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ò–∑–º–µ–Ω–∏—Ç—å/–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
  const onContactAction = async () => {
    if (!userId) {
      alert("–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏‚Äë–∞–ø–ø –∏–∑ Telegram –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start –±–æ—Ç—É.");
      return;
    }
    if (!editingContact) {
      setEditingContact(true);
      return;
    }
    try {
      await axios.post(`${BACKEND_URL}/contact`, {
        user_id: Number(userId),
        contact,
      });
      setEditingContact(false);
      alert("–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω");
    } catch (e) {
      const msg =
        e?.response?.data?.error || e?.message || "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞";
      alert(msg);
    }
  };

  const isTelegramReady = !!userId;

  return (
    <div className="app" style={{ backgroundColor: isHome ? "#d4f7d4" : "#f7d4d4" }}>
      <h1>Home Alone App</h1>

      {!isTelegramReady && (
        <div style={{ marginBottom: 12, color: "#a00", fontWeight: "bold" }}>
          –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏‚Äë–∞–ø–ø –∏–∑ –º–µ–Ω—é –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start
        </div>
      )}

      {/* –°–ª–∞–π–¥–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
      <div className="slider-container" style={{ opacity: isTelegramReady ? 1 : 0.6 }}>
        <span className="status-label">üè† –î–æ–º–∞</span>
        <label className="switch">
          <input
            type="checkbox"
            checked={!isHome}
            onChange={toggleStatus}
            disabled={!isTelegramReady || busy}
          />
          <span className="slider round"></span>
        </label>
        <span className="status-label">üö∂ –ù–µ –¥–æ–º–∞</span>
      </div>

      {/* –¢–∞–π–º–µ—Ä */}
      {!isHome && timeLeft !== null && (
        <div className="timer">–û—Å—Ç–∞–ª–æ—Å—å: {timeLeft} —Å–µ–∫.</div>
      )}

      {/* –ö–∞—Ä—Ç–∏–Ω–∫–∞ */}
      <img src={isHome ? happyDog : sadDog} alt="dog" className="dog-image" />

      {/* –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç ‚Äî –≤–Ω–∏–∑—É */}
      <div style={{ width: "100%", display: "flex", flexDirection: "column", alignItems: "center" }}>
        <input
          className="contact-input"
          placeholder="@username —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"
          value={contact}
          onChange={(e) => setContact(e.target.value)}
          disabled={!isTelegramReady || !editingContact}
        />
        <button onClick={onContactAction} disabled={!isTelegramReady}>
          {editingContact ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" : "–ò–∑–º–µ–Ω–∏—Ç—å"}
        </button>
      </div>
    </div>
  );
}
